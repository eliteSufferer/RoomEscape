using UnityEngine;
using TMPro;

public class SafeController : MonoBehaviour, IInteractable
{
    [Header("Safe Settings")]
    public string correctCode = "1234";
    public bool isOpen = false;
    public int maxCodeLength = 4;
    
    [Header("UI")]
    public GameObject codePanel;
    public TextMeshProUGUI codeDisplay;
    public TextMeshProUGUI statusText;
    
    [Header("Key")]
    public GameObject key;
    
    [Header("Animation")]
    public Animator safeAnimator; // üî• –ê–Ω–∏–º–∞—Ç–æ—Ä –¥–≤–µ—Ä–∏ —Å–µ–π—Ñ–∞ (–ø–µ—Ä–µ—Ç—è–Ω–∏ –æ–±—ä–µ–∫—Ç —Å –¥–≤–µ—Ä—Ü–µ–π!)
    public string openTrigger = "OpenSafe"; // üî• –¢—Ä–∏–≥–≥–µ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏ (–ª—É—á—à–µ —á–µ–º Bool)
    
    [Header("Audio")]
    public AudioSource audioSource;
    public AudioClip buttonSound;
    public AudioClip openSound;
    public AudioClip errorSound;
    
    private string currentCode = "";
    private bool uiOpen = false;
    
    public void Interact()
    {
        if (!isOpen)
        {
            OpenCodeUI();
        }
        else
        {
            Debug.Log("–°–µ–π—Ñ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç!");
        }
    }
    
    public string GetInteractionText()
    {
        return isOpen ? "–°–µ–π—Ñ –æ—Ç–∫—Ä—ã—Ç" : "–û—Ç–∫—Ä—ã—Ç—å —Å–µ–π—Ñ";
    }
    
    public void OpenCodeUI()
    {
        Debug.Log("–û—Ç–∫—Ä—ã—Ç–∏–µ UI –∫–æ–¥–∞ —Å–µ–π—Ñ–∞");

        if (uiOpen)
        {
            Debug.Log("UI –∫–æ–¥–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ!");
            return;
        }
        uiOpen = true;
        codePanel.SetActive(true);
        currentCode = "";
        UpdateDisplay();
        statusText.text = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:";
        
        Cursor.lockState = CursorLockMode.None;
        Cursor.visible = true;
    }
    
    public void CloseCodeUI()
    {
        Debug.Log("–ó–∞–∫—Ä—ã—Ç–∏–µ UI –∫–æ–¥–∞ —Å–µ–π—Ñ–∞");
        uiOpen = false;
        codePanel.SetActive(false);
        Cursor.lockState = CursorLockMode.Locked;
        Cursor.visible = false;
    }
    
    public void AddDigit(int digit)
    {
        if (currentCode.Length < maxCodeLength)
        {
            // üîä –ó–≤—É–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
            PlaySound(buttonSound);
            
            currentCode += digit.ToString();
            UpdateDisplay();
        }
    }
    
    public void ClearCode()
    {
        // üîä –ó–≤—É–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        PlaySound(buttonSound);
        
        currentCode = "";
        UpdateDisplay();
        statusText.text = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:";
    }
    
    public void SubmitCode()
    {
        if (currentCode == correctCode)
        {
            OpenSafe();
        }
        else
        {
            // üîä –ó–≤—É–∫ –æ—à–∏–±–∫–∏
            PlaySound(errorSound);
            
            statusText.text = "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!";
            currentCode = "";
            UpdateDisplay();
        }
    }
    
    void UpdateDisplay()
    {
        string display = currentCode;
        for (int i = currentCode.Length; i < maxCodeLength; i++)
        {
            display += "-";
        }
        codeDisplay.text = display;
    }
    
    void OpenSafe()
    {
        isOpen = true;
        statusText.text = "–°–µ–π—Ñ –æ—Ç–∫—Ä—ã—Ç!";
        
        // üîä –ó–≤—É–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è
        PlaySound(openSound);
        
        // üé¨ –ê–ù–ò–ú–ê–¶–ò–Ø –û–¢–ö–†–´–¢–ò–Ø –î–í–ï–†–ò –°–ï–ô–§–ê
        if (safeAnimator != null)
        {
            safeAnimator.SetTrigger(openTrigger);
            Debug.Log("–ó–∞–ø—É—â–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–µ–π—Ñ–∞!");
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π (–ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –∞–Ω–∏–º–∞—Ü–∏–∏)
        Invoke("ShowKey", 0.5f);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º UI —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        Invoke("CloseCodeUI", 0.5f);
    }
    
    void ShowKey()
    {
        if (key != null)
        {
            key.SetActive(true);
            Debug.Log("–ö–ª—é—á –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–µ–π—Ñ–µ!");
        }
    }
    
    void PlaySound(AudioClip clip)
    {
        if (audioSource != null && clip != null)
        {
            audioSource.PlayOneShot(clip);
        }
    }
}