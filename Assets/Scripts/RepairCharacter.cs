using UnityEngine;

public class RepairCharacter : MonoBehaviour, IInteractable
{
    [Header("Movement Settings")]
    public Transform targetPoint;
    public float moveSpeed = 3f;
    
    [Header("Repair Settings")]
    public Transform repairTarget; // –û–±—ä–µ–∫—Ç –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å—Å—è (—Ç–µ–ª–µ–≤–∏–∑–æ—Ä)
    public Television targetTV; // –¢–µ–ª–µ–≤–∏–∑–æ—Ä –∫–æ—Ç–æ—Ä—ã–π —á–∏–Ω–∏—Ç—å
    public float repairDuration = 2f; // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—á–∏–Ω–∫–∏
    public float rotationSpeed = 5f; // –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–≤–æ—Ä–æ—Ç–∞
    
    private bool isMoving = false;
    private bool isTurning = false;
    private bool isRepairing = false;
    private bool hasFinished = false;
    private Animator animator;
    
    void Start()
    {
        animator = GetComponent<Animator>();
    }
    
    public void Interact()
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä –µ—â–µ –Ω–µ –ø–æ—á–∏–Ω–µ–Ω
        if (targetTV != null && targetTV.isFixed)
        {
            Debug.Log("–¢–µ–ª–µ–≤–∏–∑–æ—Ä —É–∂–µ –ø–æ—á–∏–Ω–µ–Ω!");
            return;
        }
        
        if (!isMoving && !isTurning && !isRepairing && !hasFinished && targetPoint != null)
        {
            StartMoving();
        }
    }
    
    public string GetInteractionText()
    {
        if (targetTV != null && targetTV.isFixed)
            return "–¢–µ–ª–µ–≤–∏–∑–æ—Ä —É–∂–µ –ø–æ—á–∏–Ω–µ–Ω";
        else if (hasFinished)
            return "–£–∂–µ –ø–æ—á–∏–Ω–∏–ª —Ç–µ–ª–µ–≤–∏–∑–æ—Ä";
        else if (isRepairing)
            return "–ß–∏–Ω–∏—Ç —Ç–µ–ª–µ–≤–∏–∑–æ—Ä...";
        else if (isTurning)
            return "–ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –∫ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä—É...";
        else if (isMoving)
            return "–ò–¥–µ—Ç –∫ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä—É...";
        else
            return "–ü–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ—á–∏–Ω–∏—Ç—å —Ç–µ–ª–µ–≤–∏–∑–æ—Ä";
    }
    
    void StartMoving()
    {
        isMoving = true;
        
        // –í–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ö–æ–¥—å–±—ã
        if (animator != null)
        {
            animator.SetBool("isMoving", true);
        }
        
        Debug.Log("–ù–∞—á–∏–Ω–∞—é –¥–≤–∏–∂–µ–Ω–∏–µ –∫ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä—É");
    }
    
    void Update()
    {
        if (isMoving && targetPoint != null)
        {
            // –î–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏
            Vector3 direction = (targetPoint.position - transform.position).normalized;
            transform.position += direction * moveSpeed * Time.deltaTime;
            
            // –ü–æ–≤–æ—Ä–æ—Ç –∫ —Ü–µ–ª–∏ –≤–æ –≤—Ä–µ–º—è –¥–≤–∏–∂–µ–Ω–∏—è
            if (direction != Vector3.zero)
            {
                transform.rotation = Quaternion.LookRotation(direction);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—à–ª–∏ –ª–∏
            float distance = Vector3.Distance(transform.position, targetPoint.position);
            if (distance < 0.1f)
            {
                StopMovingAndStartTurning();
            }
        }
        else if (isTurning && repairTarget != null)
        {
            // –ü–æ–≤–æ—Ä–æ—Ç –∫ –æ–±—ä–µ–∫—Ç—É –ø–æ—á–∏–Ω–∫–∏
            Vector3 directionToTarget = (repairTarget.position - transform.position).normalized;
            Quaternion targetRotation = Quaternion.LookRotation(directionToTarget);
            
            // –ü–ª–∞–≤–Ω–æ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è
            transform.rotation = Quaternion.Slerp(transform.rotation, targetRotation, rotationSpeed * Time.deltaTime);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
            float angle = Quaternion.Angle(transform.rotation, targetRotation);
            if (angle < 5f) // 5 –≥—Ä–∞–¥—É—Å–æ–≤ —Ç–æ—á–Ω–æ—Å—Ç–∏
            {
                StartRepair();
            }
        }
    }
    
    void StopMovingAndStartTurning()
    {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–≤–æ—Ä–æ—Ç
        isMoving = false;
        isTurning = true;
        
        if (animator != null)
        {
            animator.SetBool("isMoving", false);
        }
        
        Debug.Log("–î–æ—à–µ–ª –¥–æ —Ç–æ—á–∫–∏, –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞—é—Å—å –∫ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä—É!");
    }
    
    void StartRepair()
    {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–≤–æ—Ä–æ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ—á–∏–Ω–∫—É
        isTurning = false;
        isRepairing = true;
        
        if (animator != null)
        {
            animator.SetBool("isRepairing", true);
        }
        
        Debug.Log("–ü–æ–≤–µ—Ä–Ω—É–ª—Å—è –∫ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä—É, –Ω–∞—á–∏–Ω–∞—é —á–∏–Ω–∏—Ç—å!");
        
        // –ß–µ—Ä–µ–∑ repairDuration —Å–µ–∫—É–Ω–¥ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Ä–µ–º–æ–Ω—Ç
        Invoke("FinishRepair", repairDuration);
    }
    
    void FinishRepair()
    {
        isRepairing = false;
        hasFinished = true;
        
        if (animator != null)
        {
            // –í—ã–∫–ª—é—á–∞–µ–º –ø–æ—á–∏–Ω–∫—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ idle
            animator.SetBool("isRepairing", false);
        }
        
        // üéâ –ß–ò–ù–ò–ú –¢–ï–õ–ï–í–ò–ó–û–†! üéâ
        if (targetTV != null)
        {
            targetTV.FixTV();
            Debug.Log("–¢–µ–ª–µ–≤–∏–∑–æ—Ä –ø–æ—á–∏–Ω–µ–Ω! –ö–æ–¥ –ø–æ—è–≤–∏–ª—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ!");
        }
        else
        {
            Debug.LogError("Target TV –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω!");
        }
        
        Debug.Log("–ü–æ—á–∏–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    }
}