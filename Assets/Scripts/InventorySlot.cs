using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class InventorySlot : MonoBehaviour
{
    [Header("UI References")]
    public Image itemIcon;
    public TextMeshProUGUI itemCount;
    public Button slotButton;
    public Image slotBackground; // üî• –§–æ–Ω —Å–ª–æ—Ç–∞ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
    
    [Header("Visual Settings")]
    public Color normalColor = Color.white;
    public Color activeColor = Color.yellow; // üî• –¶–≤–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    
    private PickupItem currentItem;
    private int count;
    private int slotIndex; // üî• –ò–Ω–¥–µ–∫—Å —ç—Ç–æ–≥–æ —Å–ª–æ—Ç–∞
    
    void Start()
    {
        if (slotButton == null)
            slotButton = GetComponent<Button>();
            
        if (slotBackground == null)
            slotBackground = GetComponent<Image>();
            
        slotButton.onClick.AddListener(SelectItem);
        
        // üî• –ù–∞–π—Ç–∏ —Å–≤–æ–π –∏–Ω–¥–µ–∫—Å –≤ –º–∞—Å—Å–∏–≤–µ —Å–ª–æ—Ç–æ–≤
        FindSlotIndex();
    }
    
    void FindSlotIndex()
    {
        // –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–π –∏–Ω–¥–µ–∫—Å —Å—Ä–µ–¥–∏ —Å–ª–æ—Ç–æ–≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        InventorySlot[] allSlots = FindObjectOfType<InventoryManager>().inventorySlots;
        for (int i = 0; i < allSlots.Length; i++)
        {
            if (allSlots[i] == this)
            {
                slotIndex = i;
                break;
            }
        }
    }
    
    public void SetItem(PickupItem item, int itemCount, bool isActive = false)
    {
        currentItem = item;
        count = itemCount;
        
        if (item.itemIcon != null)
        {
            itemIcon.sprite = item.itemIcon;
            itemIcon.color = Color.white;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        this.itemCount.text = count.ToString();
        this.itemCount.gameObject.SetActive(true);
        
        itemIcon.gameObject.SetActive(true);
        
        // üî• –í–∏–∑—É–∞–ª—å–Ω–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        UpdateActiveVisual(isActive);
    }
    
    public void ClearSlot()
    {
        currentItem = null;
        count = 0;
        itemIcon.gameObject.SetActive(false);
        itemCount.gameObject.SetActive(false);
        
        // üî• –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
        UpdateActiveVisual(false);
    }
    
    void UpdateActiveVisual(bool isActive)
    {
        if (slotBackground != null)
        {
            slotBackground.color = isActive ? activeColor : normalColor;
        }
    }
    
    public void SelectItem()
    {
        if (currentItem != null)
        {
            // üî• –°–æ–æ–±—â–∞–µ–º InventoryManager –æ –≤—ã–±–æ—Ä–µ —ç—Ç–æ–≥–æ —Å–ª–æ—Ç–∞
            InventoryManager.Instance.SelectActiveItem(slotIndex);
            Debug.Log($"–í—ã–±—Ä–∞–Ω —Å–ª–æ—Ç {slotIndex}: {currentItem.itemName}");
        }
    }
    
    // üî• –°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è UseItem –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    public void UseItem()
    {
        SelectItem();
    }
}