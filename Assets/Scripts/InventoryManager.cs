using UnityEngine;
using TMPro;
using UnityEngine.UI;

public class InventoryManager : MonoBehaviour
{
    public static InventoryManager Instance;

    [Header("UI")]
    public GameObject inventoryPanel;
    public InventorySlot[] inventorySlots;
    
    [Header("Active Item UI")]
    public TextMeshProUGUI activeItemText; // üî• –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç

    [Header("Settings")]
    public int inventorySize = 8;

    private PickupItem[] items;
    private int[] itemCounts;
    private int activeSlotIndex = -1; // üî• –ò–Ω–¥–µ–∫—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ (-1 = –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ)

    void Awake()
    {
        Instance = this;
        items = new PickupItem[inventorySize];
        itemCounts = new int[inventorySize];
    }

    void Update()
    {
        // –û—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ Tab
        if (Input.GetKeyDown(KeyCode.Tab))
        {
            ToggleInventory();
        }
    }

    public void ToggleInventory()
    {
        bool isActive = !inventoryPanel.activeSelf;
        inventoryPanel.SetActive(isActive);

        if (isActive)
        {
            UpdateInventoryDisplay();
            Cursor.lockState = CursorLockMode.None;
            Cursor.visible = true;
        }
        else
        {
            Cursor.lockState = CursorLockMode.Locked;
            Cursor.visible = false;
        }
    }

    public bool AddItem(PickupItem item)
    {
        // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞–∫
        for (int i = 0; i < inventorySize; i++)
        {
            if (items[i] != null && items[i].itemName == item.itemName && itemCounts[i] < item.stackSize)
            {
                itemCounts[i]++;
                UpdateInventoryDisplay();
                Debug.Log($"–î–æ–±–∞–≤–ª–µ–Ω {item.itemName} –≤ —Å—Ç–∞–∫. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {itemCounts[i]}/{item.stackSize}");
                return true;
            }
        }

        // –ò—â–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ—Ç
        for (int i = 0; i < inventorySize; i++)
        {
            if (items[i] == null)
            {
                items[i] = item;
                itemCounts[i] = 1;
                UpdateInventoryDisplay();
                Debug.Log($"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π {item.itemName}. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1/{item.stackSize}");
                return true;
            }
        }

        Debug.Log("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª–æ–Ω! –ù–µ –º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å " + item.itemName);
        return false;
    }

    void UpdateInventoryDisplay()
    {
        for (int i = 0; i < inventorySlots.Length; i++)
        {
            if (i < inventorySize && items[i] != null)
            {
                bool isActive = (i == activeSlotIndex); // üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                inventorySlots[i].SetItem(items[i], itemCounts[i], isActive);
            }
            else
            {
                inventorySlots[i].ClearSlot();
            }
        }
        
        UpdateActiveItemDisplay(); // üî• –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    }
    
    // üî• –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –≤—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
    public void SelectActiveItem(int slotIndex)
    {
        if (slotIndex < inventorySize && items[slotIndex] != null)
        {
            if (activeSlotIndex == slotIndex)
            {
                // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–ª–∏–∫ - —Å–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                activeSlotIndex = -1;
                Debug.Log("–ü—Ä–µ–¥–º–µ—Ç —Å–Ω—è—Ç —Å –≤—ã–¥–µ–ª–µ–Ω–∏—è");
            }
            else
            {
                // –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
                activeSlotIndex = slotIndex;
                Debug.Log($"–ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç: {items[slotIndex].itemName}");
            }
            
            UpdateInventoryDisplay();
        }
    }
    
    // üî• –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
    public string GetActiveItemName()
    {
        if (activeSlotIndex >= 0 && activeSlotIndex < inventorySize && items[activeSlotIndex] != null)
        {
            return items[activeSlotIndex].itemName;
        }
        return null;
    }
    
    // üî• –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    public bool HasActiveItem(string itemName)
    {
        string activeItem = GetActiveItemName();
        return activeItem != null && activeItem == itemName;
    }
    
    void UpdateActiveItemDisplay()
    {
        if (activeItemText != null)
        {
            string activeItem = GetActiveItemName();
            if (activeItem != null)
            {
                activeItemText.text = $"–ê–∫—Ç–∏–≤–Ω–æ: {activeItem}";
                activeItemText.gameObject.SetActive(true);
            }
            else
            {
                activeItemText.text = "–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ";
                activeItemText.gameObject.SetActive(false);
            }
        }
    }
    
    public bool HasItem(string itemName)
    {
        for (int i = 0; i < inventorySize; i++)
        {
            if (items[i] != null && items[i].itemName == itemName)
            {
                return true;
            }
        }
        return false;
    }

    public void UseItem(string itemName)
    {
        for (int i = 0; i < inventorySize; i++)
        {
            if (items[i] != null && items[i].itemName == itemName)
            {
                itemCounts[i]--;
                Debug.Log($"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω {itemName}. –û—Å—Ç–∞–ª–æ—Å—å: {itemCounts[i]}");
                
                if (itemCounts[i] <= 0)
                {
                    items[i] = null;
                    itemCounts[i] = 0;
                    
                    // üî• –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –±—ã–ª –∞–∫—Ç–∏–≤–Ω—ã–º - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                    if (activeSlotIndex == i)
                    {
                        activeSlotIndex = -1;
                    }
                }
                UpdateInventoryDisplay();
                return;
            }
        }
    }
    
    public int GetItemCount(string itemName)
    {
        for (int i = 0; i < inventorySize; i++)
        {
            if (items[i] != null && items[i].itemName == itemName)
            {
                return itemCounts[i];
            }
        }
        return 0;
    }
}