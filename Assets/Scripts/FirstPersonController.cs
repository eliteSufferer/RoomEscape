using UnityEngine;

public class FirstPersonController : MonoBehaviour
{
    [Header("Movement")]
    public float walkSpeed = 5f;
    public float runSpeed = 10f;
    
    [Header("Mouse Look")]
    public float mouseSensitivity = 2f;
    public float upDownRange = 80f;
    
    [Header("Gravity")]
    public float gravity = -20f; // üî• –î–û–ë–ê–í–ò–õ–ò –ì–†–ê–í–ò–¢–ê–¶–ò–Æ
    public float groundCheckDistance = 0.3f;
    
    private CharacterController characterController;
    private Camera playerCamera;
    private float verticalRotation = 0;
    private Vector3 velocity; // üî• –î–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
    
    void Start()
    {
        characterController = GetComponent<CharacterController>();
        playerCamera = GetComponentInChildren<Camera>();
        
        // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å–æ—Ä –≤ —Ü–µ–Ω—Ç—Ä–µ —ç–∫—Ä–∞–Ω–∞
        Cursor.lockState = CursorLockMode.Locked;
    }
    
    void Update()
    {
        // –ù–µ –¥–≤–∏–≥–∞—Ç—å—Å—è –∏ –Ω–µ –∫—Ä—É—Ç–∏—Ç—å –∫–∞–º–µ—Ä—É –Ω–∞ –ø–∞—É–∑–µ
        if (Time.timeScale == 0f) return;
        
        HandleMouseLook();
        HandleMovement();
        HandleGravity(); // üî• –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø
    }
    
    void HandleMouseLook()
    {
        // üî• –ù–ï –ö–†–£–¢–ò–¢–¨ –ö–ê–ú–ï–†–£ –ï–°–õ–ò –ö–£–†–°–û–† –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù (UI –æ—Ç–∫—Ä—ã—Ç)
        if (Cursor.lockState != CursorLockMode.Locked)
            return;
            
        // –î–≤–∏–∂–µ–Ω–∏–µ –º—ã—à—å—é
        float mouseX = Input.GetAxis("Mouse X") * mouseSensitivity;
        float mouseY = Input.GetAxis("Mouse Y") * mouseSensitivity;
        
        // –ü–æ–≤–æ—Ä–æ—Ç –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        transform.Rotate(0, mouseX, 0);
        
        // –ü–æ–≤–æ—Ä–æ—Ç –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        verticalRotation -= mouseY;
        verticalRotation = Mathf.Clamp(verticalRotation, -upDownRange, upDownRange);
        playerCamera.transform.localRotation = Quaternion.Euler(verticalRotation, 0, 0);
    }
    
    void HandleMovement()
    {
        // üî• –ù–ï –î–í–ò–ì–ê–¢–¨–°–Ø –ï–°–õ–ò –ö–£–†–°–û–† –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù (UI –æ—Ç–∫—Ä—ã—Ç)
        if (Cursor.lockState != CursorLockMode.Locked)
            return;
            
        // –î–≤–∏–∂–µ–Ω–∏–µ WASD
        float speed = Input.GetKey(KeyCode.LeftShift) ? runSpeed : walkSpeed;
        
        float horizontal = Input.GetAxis("Horizontal");
        float vertical = Input.GetAxis("Vertical");
        
        // üî• –¢–û–õ–¨–ö–û –ì–û–†–ò–ó–û–ù–¢–ê–õ–¨–ù–û–ï –î–í–ò–ñ–ï–ù–ò–ï (–±–µ–∑ Y)
        Vector3 movement = transform.right * horizontal + transform.forward * vertical;
        movement = Vector3.ClampMagnitude(movement, 1f); // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–≥–æ–Ω–∞–ª–∏
        
        characterController.Move(movement * speed * Time.deltaTime);
    }
    
    void HandleGravity()
    {
        // üî• –ì–†–ê–í–ò–¢–ê–¶–ò–Ø –ò –ü–†–û–í–ï–†–ö–ê –ó–ï–ú–õ–ò
        bool isGrounded = IsGrounded();
        
        if (isGrounded && velocity.y < 0)
        {
            velocity.y = -2f; // –ù–µ–±–æ–ª—å—à–∞—è —Å–∏–ª–∞ –ø—Ä–∏–∂–∞—Ç–∏—è –∫ –∑–µ–º–ª–µ
        }
        else
        {
            velocity.y += gravity * Time.deltaTime; // –ü–∞–¥–µ–Ω–∏–µ
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
        characterController.Move(velocity * Time.deltaTime);
    }
    
    bool IsGrounded()
    {
        // üî• Raycast –≤–Ω–∏–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–µ–º–ª–∏
        Vector3 rayStart = transform.position;
        float rayDistance = (characterController.height / 2f) + groundCheckDistance;
        
        return Physics.Raycast(rayStart, Vector3.down, rayDistance);
    }
    
    // üî• Debug –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    void OnDrawGizmosSelected()
    {
        if (characterController != null)
        {
            Gizmos.color = Color.red;
            Vector3 rayStart = transform.position;
            float rayDistance = (characterController.height / 2f) + groundCheckDistance;
            Gizmos.DrawRay(rayStart, Vector3.down * rayDistance);
        }
    }
}